/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PaktManager {
  export type PaktStruct = {
    amount: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    paktType: PromiseOrValue<BigNumberish>;
    level: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
    success: PromiseOrValue<boolean>;
    description: PromiseOrValue<string>;
  };

  export type PaktStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    paktType: number;
    level: number;
    active: boolean;
    success: boolean;
    description: string;
  };
}

export interface PaktManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAKT_DURATION()": FunctionFragment;
    "PAKT_VERIFIER_ROLE()": FunctionFragment;
    "computeInterestForAmount(uint256,uint8)": FunctionFragment;
    "endCustomPakt(uint256,bool)": FunctionFragment;
    "extendPakt(uint256,uint256)": FunctionFragment;
    "failPakt(uint256)": FunctionFragment;
    "getAllPaktsFromUser(address)": FunctionFragment;
    "getInterestRateByLevel()": FunctionFragment;
    "getMaxAmountByLevel()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "linkWalletAndSourceId(address,uint256)": FunctionFragment;
    "makeNewPakt(uint8,uint8,uint256,string)": FunctionFragment;
    "markPaktVerified(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "s_activePaktTypes(address,uint8)": FunctionFragment;
    "s_burnInterestRatio()": FunctionFragment;
    "s_interestRateByLevel(uint256)": FunctionFragment;
    "s_maxAmountByLevel(uint256)": FunctionFragment;
    "s_paktTypeCount()": FunctionFragment;
    "s_pakts(address,uint256)": FunctionFragment;
    "s_sourceIdToWallet(uint256)": FunctionFragment;
    "s_unlockFundsFee()": FunctionFragment;
    "s_walletToSourceId(address)": FunctionFragment;
    "setBurnInterestRatio(uint8)": FunctionFragment;
    "setInterestRateByLevel(uint8[6])": FunctionFragment;
    "setMaxAmountByLevel(uint16[6])": FunctionFragment;
    "setPaktTypeCount(uint8)": FunctionFragment;
    "setUnlockFundsFee(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unlockFunds(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PAKT_DURATION"
      | "PAKT_VERIFIER_ROLE"
      | "computeInterestForAmount"
      | "endCustomPakt"
      | "extendPakt"
      | "failPakt"
      | "getAllPaktsFromUser"
      | "getInterestRateByLevel"
      | "getMaxAmountByLevel"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "linkWalletAndSourceId"
      | "makeNewPakt"
      | "markPaktVerified"
      | "renounceRole"
      | "revokeRole"
      | "s_activePaktTypes"
      | "s_burnInterestRatio"
      | "s_interestRateByLevel"
      | "s_maxAmountByLevel"
      | "s_paktTypeCount"
      | "s_pakts"
      | "s_sourceIdToWallet"
      | "s_unlockFundsFee"
      | "s_walletToSourceId"
      | "setBurnInterestRatio"
      | "setInterestRateByLevel"
      | "setMaxAmountByLevel"
      | "setPaktTypeCount"
      | "setUnlockFundsFee"
      | "supportsInterface"
      | "unlockFunds"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAKT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAKT_VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeInterestForAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endCustomPakt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendPakt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "failPakt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPaktsFromUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRateByLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAmountByLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWalletAndSourceId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeNewPakt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "markPaktVerified",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_activePaktTypes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_burnInterestRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_interestRateByLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_maxAmountByLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_paktTypeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_pakts",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_sourceIdToWallet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_unlockFundsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_walletToSourceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnInterestRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateByLevel",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAmountByLevel",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaktTypeCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockFundsFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAKT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAKT_VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeInterestForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCustomPakt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extendPakt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failPakt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPaktsFromUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAmountByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkWalletAndSourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeNewPakt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markPaktVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_activePaktTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_burnInterestRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_interestRateByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_maxAmountByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_paktTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_pakts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_sourceIdToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_unlockFundsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_walletToSourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnInterestRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAmountByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaktTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockFundsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "PaktCreated(address,uint256)": EventFragment;
    "PaktEnded(address,uint256)": EventFragment;
    "PaktExtended(address,uint256)": EventFragment;
    "PaktVerified(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "WalletAndSourceIdLinked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaktCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaktEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaktExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaktVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletAndSourceIdLinked"): EventFragment;
}

export interface PaktCreatedEventObject {
  user: string;
  paktIndex: BigNumber;
}
export type PaktCreatedEvent = TypedEvent<
  [string, BigNumber],
  PaktCreatedEventObject
>;

export type PaktCreatedEventFilter = TypedEventFilter<PaktCreatedEvent>;

export interface PaktEndedEventObject {
  user: string;
  paktIndex: BigNumber;
}
export type PaktEndedEvent = TypedEvent<
  [string, BigNumber],
  PaktEndedEventObject
>;

export type PaktEndedEventFilter = TypedEventFilter<PaktEndedEvent>;

export interface PaktExtendedEventObject {
  user: string;
  paktIndex: BigNumber;
}
export type PaktExtendedEvent = TypedEvent<
  [string, BigNumber],
  PaktExtendedEventObject
>;

export type PaktExtendedEventFilter = TypedEventFilter<PaktExtendedEvent>;

export interface PaktVerifiedEventObject {
  user: string;
  paktIndex: BigNumber;
}
export type PaktVerifiedEvent = TypedEvent<
  [string, BigNumber],
  PaktVerifiedEventObject
>;

export type PaktVerifiedEventFilter = TypedEventFilter<PaktVerifiedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface WalletAndSourceIdLinkedEventObject {
  wallet: string;
  sourceId: BigNumber;
}
export type WalletAndSourceIdLinkedEvent = TypedEvent<
  [string, BigNumber],
  WalletAndSourceIdLinkedEventObject
>;

export type WalletAndSourceIdLinkedEventFilter =
  TypedEventFilter<WalletAndSourceIdLinkedEvent>;

export interface PaktManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaktManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAKT_DURATION(overrides?: CallOverrides): Promise<[number]>;

    PAKT_VERIFIER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    computeInterestForAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _paktLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endCustomPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _isPaktSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    failPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllPaktsFromUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PaktManager.PaktStructOutput[]]>;

    getInterestRateByLevel(overrides?: CallOverrides): Promise<[number[]]>;

    getMaxAmountByLevel(overrides?: CallOverrides): Promise<[number[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkWalletAndSourceId(
      _wallet: PromiseOrValue<string>,
      _sourceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeNewPakt(
      _paktType: PromiseOrValue<BigNumberish>,
      _level: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markPaktVerified(
      _paktOwner: PromiseOrValue<string>,
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_activePaktTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    s_burnInterestRatio(overrides?: CallOverrides): Promise<[number]>;

    s_interestRateByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    s_maxAmountByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    s_paktTypeCount(overrides?: CallOverrides): Promise<[number]>;

    s_pakts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        string
      ] & {
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        paktType: number;
        level: number;
        active: boolean;
        success: boolean;
        description: string;
      }
    >;

    s_sourceIdToWallet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    s_unlockFundsFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_walletToSourceId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBurnInterestRatio(
      _burnInterestRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterestRateByLevel(
      _interestRateByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxAmountByLevel(
      _maxAmountByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaktTypeCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnlockFundsFee(
      _unlockFundsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlockFunds(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAKT_DURATION(overrides?: CallOverrides): Promise<number>;

  PAKT_VERIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

  computeInterestForAmount(
    _amount: PromiseOrValue<BigNumberish>,
    _paktLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endCustomPakt(
    _paktIndex: PromiseOrValue<BigNumberish>,
    _isPaktSuccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendPakt(
    _paktIndex: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  failPakt(
    _paktIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllPaktsFromUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PaktManager.PaktStructOutput[]>;

  getInterestRateByLevel(overrides?: CallOverrides): Promise<number[]>;

  getMaxAmountByLevel(overrides?: CallOverrides): Promise<number[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkWalletAndSourceId(
    _wallet: PromiseOrValue<string>,
    _sourceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeNewPakt(
    _paktType: PromiseOrValue<BigNumberish>,
    _level: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markPaktVerified(
    _paktOwner: PromiseOrValue<string>,
    _paktIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_activePaktTypes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  s_burnInterestRatio(overrides?: CallOverrides): Promise<number>;

  s_interestRateByLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  s_maxAmountByLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  s_paktTypeCount(overrides?: CallOverrides): Promise<number>;

  s_pakts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      boolean,
      string
    ] & {
      amount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      paktType: number;
      level: number;
      active: boolean;
      success: boolean;
      description: string;
    }
  >;

  s_sourceIdToWallet(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  s_unlockFundsFee(overrides?: CallOverrides): Promise<BigNumber>;

  s_walletToSourceId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBurnInterestRatio(
    _burnInterestRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterestRateByLevel(
    _interestRateByLevel: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxAmountByLevel(
    _maxAmountByLevel: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaktTypeCount(
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnlockFundsFee(
    _unlockFundsFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlockFunds(
    _paktIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAKT_DURATION(overrides?: CallOverrides): Promise<number>;

    PAKT_VERIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

    computeInterestForAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _paktLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endCustomPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _isPaktSuccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    extendPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    failPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllPaktsFromUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PaktManager.PaktStructOutput[]>;

    getInterestRateByLevel(overrides?: CallOverrides): Promise<number[]>;

    getMaxAmountByLevel(overrides?: CallOverrides): Promise<number[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkWalletAndSourceId(
      _wallet: PromiseOrValue<string>,
      _sourceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeNewPakt(
      _paktType: PromiseOrValue<BigNumberish>,
      _level: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    markPaktVerified(
      _paktOwner: PromiseOrValue<string>,
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    s_activePaktTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    s_burnInterestRatio(overrides?: CallOverrides): Promise<number>;

    s_interestRateByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    s_maxAmountByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    s_paktTypeCount(overrides?: CallOverrides): Promise<number>;

    s_pakts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        string
      ] & {
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        paktType: number;
        level: number;
        active: boolean;
        success: boolean;
        description: string;
      }
    >;

    s_sourceIdToWallet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    s_unlockFundsFee(overrides?: CallOverrides): Promise<BigNumber>;

    s_walletToSourceId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBurnInterestRatio(
      _burnInterestRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateByLevel(
      _interestRateByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAmountByLevel(
      _maxAmountByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPaktTypeCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnlockFundsFee(
      _unlockFundsFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockFunds(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "PaktCreated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktCreatedEventFilter;
    PaktCreated(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktCreatedEventFilter;

    "PaktEnded(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktEndedEventFilter;
    PaktEnded(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktEndedEventFilter;

    "PaktExtended(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktExtendedEventFilter;
    PaktExtended(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktExtendedEventFilter;

    "PaktVerified(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktVerifiedEventFilter;
    PaktVerified(
      user?: PromiseOrValue<string> | null,
      paktIndex?: null
    ): PaktVerifiedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "WalletAndSourceIdLinked(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      sourceId?: null
    ): WalletAndSourceIdLinkedEventFilter;
    WalletAndSourceIdLinked(
      wallet?: PromiseOrValue<string> | null,
      sourceId?: null
    ): WalletAndSourceIdLinkedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAKT_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PAKT_VERIFIER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    computeInterestForAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _paktLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endCustomPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _isPaktSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    failPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllPaktsFromUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRateByLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxAmountByLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkWalletAndSourceId(
      _wallet: PromiseOrValue<string>,
      _sourceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeNewPakt(
      _paktType: PromiseOrValue<BigNumberish>,
      _level: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markPaktVerified(
      _paktOwner: PromiseOrValue<string>,
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_activePaktTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_burnInterestRatio(overrides?: CallOverrides): Promise<BigNumber>;

    s_interestRateByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_maxAmountByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_paktTypeCount(overrides?: CallOverrides): Promise<BigNumber>;

    s_pakts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_sourceIdToWallet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_unlockFundsFee(overrides?: CallOverrides): Promise<BigNumber>;

    s_walletToSourceId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBurnInterestRatio(
      _burnInterestRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterestRateByLevel(
      _interestRateByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxAmountByLevel(
      _maxAmountByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaktTypeCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnlockFundsFee(
      _unlockFundsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockFunds(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAKT_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAKT_VERIFIER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeInterestForAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _paktLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endCustomPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _isPaktSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    failPakt(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllPaktsFromUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRateByLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxAmountByLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkWalletAndSourceId(
      _wallet: PromiseOrValue<string>,
      _sourceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeNewPakt(
      _paktType: PromiseOrValue<BigNumberish>,
      _level: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markPaktVerified(
      _paktOwner: PromiseOrValue<string>,
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_activePaktTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_burnInterestRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_interestRateByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_maxAmountByLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_paktTypeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_pakts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_sourceIdToWallet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_unlockFundsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_walletToSourceId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBurnInterestRatio(
      _burnInterestRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateByLevel(
      _interestRateByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAmountByLevel(
      _maxAmountByLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaktTypeCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockFundsFee(
      _unlockFundsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockFunds(
      _paktIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
